/*
 * Builder coordinator class.
 *
 * Licensed Materials - Property of IBM 
 * 5724-O03
 * (C) Copyright 2012. IBM Corp. All rights reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * See Web Experience Factory ( product id 5724-O03 ) product license for terms and conditions of use. 
 *
 * This Java source file was generated by the Web Experience Factory.
 *
 * Do not edit generated code within the following comments /*##GENERATED_...
 */

import java.util.*;
import com.bowstreet.webapp.util.*;
import com.bowstreet.webapp.*;
import com.bowstreet.editor.uitools.coordinator.WebAppBaseCoordinator;
import com.bowstreet.editor.CoordinatorContext;
import com.bowstreet.generation.BuilderDef;
import com.bowstreet.generation.BuilderInputDefinition;
import com.bowstreet.generation.DynamicBuilderInputDefinition;

/**
 * Coordinator implementation
 */
public class ClassName extends WebAppBaseCoordinator
{
	static class InputDefinitions
	{
    }

    InputDefinitions defs = new InputDefinitions();

    /**
     * The initialization method is called each time the builder call is opened.
     * Here you can set defaults, create dynamic pick lists, show/hide/create inputs.
     */
    public String initializeInputs(boolean isNewBuilderCall)
    {
        /*##GENERATED_BODY_BEGIN#CoordinatorDefInitCode#*/
        /*##GENERATED_BODY_END*/


        // All the builder input definitions are now available using the initialized "defs" structure like this:
        // DynamicBuilderInputDefinition myDef = defs.myInput;

        // Use this test to do any special initialization for a new builder call
        if (isNewBuilderCall)
        {
            /*
            // Example of how to set the initial value for a text input to the current time
            defs.time.setString("This builder call was first created " + new java.util.Date().toString());
            */
        }

        /*
        // Example of creating a dynamic pick list (for "DynamicSelect" input)
        StringBuffer choiceValues = new StringBuffer();
        StringBuffer choiceLabels = new StringBuffer();

		// Values will be 1,2,3,4; visible labels will be Choice 1, Choice 2, Choice 3, Choice 4
		for (int i = 1; i <= 4; i++)
		{
			choiceValues.append(",");
			choiceLabels.append(",");
			choiceValues.append(Integer.toString(i));
			choiceLabels.append("Choice " + Integer.toString(i));
		}

        // Set list and labels into input definition
        defs.dynamicSelect.setArgument("listData", choiceValues.toString());
        defs.dynamicSelect.setArgument("listLabels", choiceLabels.toString());
        defs.dynamicSelect.setArgument("isEditable", "false");
        */

        /*
		// Example of initializing the visibility of one input based on another
    	boolean useSpecial = defs.useSpecialInput.getBoolean();
    	defs.specialInput.setVisible(useSpecial);
        */
        return null;
    }

    /**
     * This is called whenever any input is changed.
     * NOTE: This method must return "true" to have UI updated.
     */
    public boolean processInputChange(DynamicBuilderInputDefinition changed)
    {
        /*
        // Check to see which input was changed
        if (changed == defs.useSpecialInput)
        {
        	// Example of how to show/hide another input based on a checkbox
        	defs.specialInput.setVisible(changed.getBoolean());
        	return true;
        }
        */

        // don't update UI by default
        return false;
    }

    /**
     *  This method is called whenever OK or Apply is pressed.
     *  NOTE: This method can be implemented to remove extra inputs,
     *  but this should only be done if the inputs aren't needed any
     *  more, since the Builder Call may still remain open for further
     *  editing after Apply is pressed.
     */
    public void terminate()
    {
    }

}
